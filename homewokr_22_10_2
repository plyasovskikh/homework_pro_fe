1. Найти первых двух сотрудников в списке, отсортированных по имени

Пишем в программе: 
db.employees.find().sort({ name: 1 }).limit(2);

Получаем: 
{
  _id: ObjectId('6717e9bfd35a779587d6d9ad'),
  name: 'Alice',
  age: 28,
  position: 'Manager',
  salary: 5000
}
{
  _id: ObjectId('6717e9bfd35a779587d6d9b4'),
  name: 'Barbara',
  age: 21,
  position: 'HR',
  salary: 4300
}

2. Найти сотрудников младше 30 лет и отсортировать их по возрасту в порядке возрастания.

Пишем в программе: 
db.employees.find({ age: { $lt: 30 } }).sort({ age: 1 })

Получаем: 
{
  _id: ObjectId('6717e9bfd35a779587d6d9b4'),
  name: 'Barbara',
  age: 21,
  position: 'HR',
  salary: 4300
}
{
  _id: ObjectId('6717e9bfd35a779587d6d9b6'),
  name: 'Emmy',
  age: 22,
  position: 'HR',
  salary: 4500
}
{
  _id: ObjectId('6717e9bfd35a779587d6d9af'),
  name: 'Charlie',
  age: 24,
  position: 'Designer',
  salary: 4000
}
{
  _id: ObjectId('6717e9bfd35a779587d6d9b2'),
  name: 'Helen',
  age: 25,
  position: 'Manager',
  salary: 5500
}
{
  _id: ObjectId('6717e9bfd35a779587d6d9ad'),
  name: 'Alice',
  age: 28,
  position: 'Manager',
  salary: 5000
}
{
  _id: ObjectId('6717e9bfd35a779587d6d9b1'),
  name: 'Eva',
  age: 29,
  position: 'HR',
  salary: 4500
}

3. Найти сотрудников, начиная с третьего по порядку (пропустив первых двух), и ограничить выборку тремя следующими

Пишем в программе: 
db.employees.find().skip(2).limit(3)

Получаем: 
{
  _id: ObjectId('6717e9bfd35a779587d6d9af'),
  name: 'Charlie',
  age: 24,
  position: 'Designer',
  salary: 4000
}
{
  _id: ObjectId('6717e9bfd35a779587d6d9b0'),
  name: 'David',
  age: 31,
  position: 'Analyst',
  salary: 5500
}
{
  _id: ObjectId('6717e9bfd35a779587d6d9b1'),
  name: 'Eva',
  age: 29,
  position: 'HR',
  salary: 4500
}

4. Найти сотрудников, занимающих должность "Manager" или "HR", и вывести только их имена, ограничив выборку первыми двумя в списке.

Пишем в программе: 
db.employees.find(
  { position: { $in: ["Manager", "HR"] } },
  { _id: 0, name: 1 }
).limit(2)

Поулчаем: 
{
  name: 'Alice'
}
{
  name: 'Eva'
}

5. Найти сотрудников с зарплатой выше 5000, пропустив первого сотрудника из выборки, и вывести только их имена

Пишем в программе: 
db.employees.find(
  { salary: { $gt: 5000 } },
  { _id: 0, name: 1 }
).skip(1)

{
  name: 'David'
}
{
  name: 'Helen'
}
{
  name: 'Ben'
}
{
  name: 'Daniel'
}

6. Увеличить зарплату на 2000 для всех сотрудников, занимающих должность "Developer"

Пишем в программе: 
db.employees.updateMany(
  { position: "Developer" }, 
  { $inc: { salary: 2000 } }
)

Получаем: 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 3,
  modifiedCount: 3,
  upsertedCount: 0
}

7. Добавить новое поле "manager" для всех сотрудников и задать значение "Alice".

Пишем в программе: 
db.employees.updateMany(
  {},
  { $set: { manager: "Alice" } }
)

Получаем: {
  acknowledged: true,
  insertedId: null,
  matchedCount: 10,
  modifiedCount: 10,
  upsertedCount: 0
}

8. Изменить значение поля "manager" на "Helen" для сотрудников, занимающих должность "HR".

Пишем в программе: 
db.employees.updateMany(
  { position: "HR" },
  { $set: { manager: "Helen" } }
)

Получаем: 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 3,
  modifiedCount: 3,
  upsertedCount: 0
}

9.Уменьшить зарплату на 500 для сотрудника по имени "Charlie".

Пишем в программе: 
db.employees.updateOne(
  { name: "Charlie" },
  { $inc: { salary: -500 } }
)

Получаем: 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

10. Удалить поле "manager" у всех сотрудников.

Пишем в программе: 
db.employees.updateMany(
  {},
  { $unset: { manager: "" } }
)

Получаем: {
  acknowledged: true,
  insertedId: null,
  matchedCount: 10,
  modifiedCount: 10,
  upsertedCount: 0
}